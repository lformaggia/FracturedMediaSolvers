 /*!
 *	@file geomSegment.hpp
 *	@brief Class for Line in 3D space.
 *
 *	@author Luca Turconi <lturconi@gmail.com>
 *  @date 22-09-2012
 *
 */

 
#ifndef GEOMSEGMENT_HPP_
#define GEOMSEGMENT_HPP_

#include<iostream>
#include<cmath>
#include<string>

#include "TypeDefinition.hpp"
#include "geomPoint3D.hpp"


namespace Geometry
{
	class Triangle; // forward declaration

	/*!
		@class Segment
		
		@author Luca Turconi <lturconi@gmail.com>
		
		This class implements the concept of Segment.
    	It stores the two extremal points in M_pA and M_pB.
    	
    	The class provides methods to compute the segment length and
    	to evaluate the segment parametrization for different values
    	of the parameter.
    	
    	It is also possible to test for the existence of intersections
    	between the segment and a plane generated by a given triangle.
    	A method to compute the intersection point is also available.
    	
    	The method showMe allows to print the class informations.
    	It is also possible to print the attributes of the segment by using << operator.
    	
    	For 3D visualization use the exportVtk method.
    	
    */
class Segment
{
public:
	//! @name Constructor & Destructor
	//@{
		
	//! Empty constructor
	Segment();
	
	//! Constructor, getting the extremal points
	/*!
	 * @param a The first point
	 * @param b The second point
	 */
	Segment(const Point3D & a, const Point3D & b);
	
	//! Copy constructor
	/*!
	 * @param s The segment copied in the new object
	 */
	Segment(const Segment & s);
	
	//! Destructor
	virtual ~Segment();
	
	//@}
	
	//! @name Get Methods
	//@{
		
	//! Get point A
	/*!
	 * @return The end point A
	 */
	inline Point3D A() const { return M_pA; }
	
	//! Get point B
	/*!
	 * @return The extreme point B
	 */
	inline Point3D B() const { return M_pB; }
	
	//@}
	
	//! @name Set Methods
	//@{
		
	//! Set point A
	/*!
	 * @param p The new value for the end point A
	 */
	inline void setA(const Point3D & p) { M_pA = p; }
	
	//! Set point B
	/*!
	 * @param p The new value for the end point B
	 */
	inline void setB(const Point3D & p) { M_pB = p; }
	
	//@}
	
	//! @name Methods
	//@{
	
	//! Parametric equation
	/*!
	 * It is the parametrization of the segment.
	 * @param l The parameter value (range [0,1])
	 * @return The point corresponding to the parameter value
	 */
	inline Point3D param(const Real & l) const
		{ return l*M_pB+(1-l)*M_pA; }
	
	//! Segment length
	/*!
	 * It computes the length of the segment
	 * @return The length of the segment
	 */
	inline Real length() const
		{ return std::sqrt( (M_pA.x - M_pB.x)*(M_pA.x - M_pB.x) +
							(M_pA.y - M_pB.y)*(M_pA.y - M_pB.y) + 
							(M_pA.z - M_pB.z)*(M_pA.z - M_pB.z)	); }
	

	bool intersectTheSegment(const Segment &, Point3D &) const;

	//! Test intersection with a plane
	/*!
	 * It tests if the segment intersect the plane generated by the given triangle.
	 * In the case of coplanar segment, the method will return FALSE.
	 * (A single intersection does not exist!)
	 * @param t The triangle generating the plane
	 * @return TRUE if the segment intersect the plane
	 * 		FALSE if the intersection does not exist
	 */	
	bool intersectThePlaneOf(const Triangle & t) const;
	
	//! Compute intersection with a plane
	/*!
	 * It compute the intersection with the plane generated by the given triangle.
	 * If the intersection does not exist, this method will return the point (NaN,NaN,NaN).
	 * Equally, in the case of coplanar segment, the method will return (NaN,NaN,NaN).
	 * (A single intersection does not exist!)
	 * @param t The triangle generating the plane
	 * @return The intersection point or (NaN,NaN,NaN) if the intersection does not exist.
	 */	
	Point3D intersectionWithThePlaneOf(const Triangle & t) const;

	
	bool isIn(Point3D) const;
	
	//! Export in vtk format
	/*!
	 * It generates the vtk file, for the 3D visualization of the segment.
	 * (Use paraview to open the vtk file)
	 * @param filename The name of the vtk file created by this method
	 * @return TRUE -> operation ended correctly
				FALSE -> an error occurred
	 */	
	bool exportVtk(const std::string & filename) const;
	
	//! Display general information about the content of the class
	/*!
	 * List of things displayed in the class
	 * @param out Specify the output format (std::cout by default)
	 */
	void showMe(std::ostream & out=std::cout) const;
	
	//@}
	
private:
	Point3D M_pA;
	Point3D M_pB;
};

//! @name External Operators
//@{
	
//! The insertion operator
/*!
 * @param ostr The stream object on which the action is performed.
 * 			This is the first parameter of the global functions,
 * 			and represents the object to the left of the operator,
 * 			i.e. the object on which the extraction operation is performed.
 * @param s The segment inserted on the stream.
 * @return The stream object on which the action is performed (ostr)
 */
std::ostream& operator<<(std::ostream & ostr, const Segment & s);

bool operator<(const Segment & s1, const Segment & s2);

//@}


} // namespace Geometry

#endif /* GEOMSEGMENT_HPP_ */
