#! /bin/bash

# include configuration file
pushd .. > /dev/null
source config
source progress-printing
set_default_basic_options
popd > /dev/null

# abort if no package is specified
if [ $# -lt 1 ]; then
echo "usage: pkgbuild <package_list>"
    exit
fi

# define list of library packages
package_list=("$@")
number_of_packages=$#

main() {

    echo
    echo "Installing packages in: ${packages_install_dir}"
    echo


    package_root=$PWD

    # iterate on packages
    for(( i=0; i < $number_of_packages; i++ )); do

        package=${package_list[$i]}
        echo -n "[${i}/${number_of_packages}] ${package}: "

        build_package ${package} ${i} || { echo -e "\nError installing package ${package}\nCheck log file: ${build_dir}/${package}.log"; exit 1; }

    done
}

build_package() {

    package=$1
    i=$2

    # load package specific functions
    source pkgbuild_${package} || return 1

    # set directory
    mkdir -p ${packages_build_dir}/scratch/$package
    pushd ${packages_build_dir}/scratch/$package >/dev/null

        src_dir=$PWD/src
        build_dir=$PWD/build
        eval install_dir=\${${package}_install_dir}
        mkdir -p ${src_dir}
        mkdir -p ${build_dir}
        mkdir -p ${install_dir}

        # redirect stdout to log file if requested
        redirect_to_log=""
        if [ $log_packages_installation ]; then
            redirect_to_log=">> ${build_dir}/${package}.log 2>&1"
            # clear log file
            echo -n "" > ${build_dir}/${package}.log
        fi

        # download library sources
        pushd src >/dev/null
            if [ $download_packages ]; then
                echo_package_status ${package} ${i} ${number_of_packages} "downloading..."
                eval download_$package ${redirect_to_log} || return 1
            fi

            # unpack
            if [ $unpack_packages ]; then
                echo_package_status ${package} ${i} ${number_of_packages} "extracting..."
                eval unpack_$package ${redirect_to_log} || return 1
            fi
        popd >/dev/null # $src_dir

        # build
        pushd build >/dev/null
            echo_package_status ${package} ${i} ${number_of_packages} "building..."
            eval build_$package ${redirect_to_log} || return 1

            # install
            echo_package_status ${package} ${i} ${number_of_packages} "installing..."
            eval install_$package ${redirect_to_log} || return 1
        popd >/dev/null # $build_dir

    popd >/dev/null # $packages_build_dir/scratch/$package

    # clean build directory if RM_DIR defined
    if [ $rm_tmp_dir ]; then rm -rf ${packages_build_dir}/scratch/$package; fi
    echo_package_status ${package} ${i} ${number_of_packages} "done.\n"
}

# execute main function
main
