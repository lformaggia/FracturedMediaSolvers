/*! @mainpage
 *
 * @section intro Introduction
 *
 * This code allows to solve the single-phase flow in a fractured porous medium modeled via the Darcy equation by using an hybrid scheme that
 * employs the Mimetic Finite Difference (MFD) in the bulk and the Finite Volume (FV), with a two-point flux approximation (TPFA), in the
 * fractures. The bulk Darcy problem is treated in mixed form and also the velocity is computed.
 * Moreover a full TPFA FV scheme is available because the actual version of the software is an extension of a previous existing FV code.
 * The MFD scheme is available for the steady state problem, the full FV scheme for both the steady and pseudo-steady problem. The MFD scheme 
 * supports iterative solvers with preconditioning, in particular a block triangular preconditioner and an ILU preconditioner. Whereas for the
 * fully FV code no preconditioning has been implemented so a direct solver must be used.
 * The output is given as '.vtu' file format, viewable by Paraview.\n
 *
 * @section howto How to execute the program
 *
 * To run the program just execute\n
 * @code
 * ./fvcode3d.exe
 * @endcode
 * By default, the parameters need are read from data.txt file.\n
 * With the option '-f ', it is possible to specify the data file.\n
 * Ex.\n
 * @code
 * ./fvcode3d.exe -f data.txt
 * @endcode
 *
 * @section input Input parameters
 *
 * The program requires:\n
 * - an input mesh in '.fvg' format\n
 * - the data file\n
 * - the defintion of the forcing function and of the functions of the boundary conditions\n
 *
 * The file format '.fvg' consists of four parts:\n
 * - list of POINTS, each of them described by its coordinates x, y, z;\n
 * - list of FACETS, each of them described by a list of ids of POINTS, plus some properties if the facet represents a
 fracture;\n
 * - list of CELLS, each of them described by a list of ids of FACETS, plus some properties;\n
 * - list of FRACTURE NETWORKS, each of them described by a list of FACETS that belong to the same network.\n
 *
 * The properties related to the facets that represent a fracture are the permeability, the porosity and the aperture.\n
 * The properties related to the cells (porous medium) are the permeability and the porosity.
 *
 * The data file consists of six sections:
 * - @c mesh: the input file parameters such as mesh location and filename\n
 * - @c output: the output directory and filename\n
 * - @c problem: parameters related to the problem, such as the problem type (steady or unsteady) or if apply or not the
 source/sink term\n
 * - @c fluid: mobility and compressibility of the fluid\n
 * - @c bc: the rotation to apply around the z axis, needed to correctly apply the boundary conditions\n
 * - @c solver: the solver to use and some parameters such as the tolerance and the number of iterations\n
 *
 * @section class Main Classes
 *
 * The main classes involved are the following:\n
 *
 * - @a Data: collects all the parameters used by the program that can be set through the datafile;\n
 * - @a Importer: reads the input file mesh;\n
 * - @a PropertiesMap: collects the properties of the fractures and porous medium;\n
 * - @a Mesh3D: stores the geometrical mesh as @a Point3D, @a Facet3D and @a Cell3D;\n
 * - @a Rigid_Mesh: converts a @a Mesh3D in a rigid format, suitable for assemble the problem;\n
 * - @a BoundaryConditions: defines the boundary conditions to assign to the problem; BCs can be Dirichlet or Neumann;\n
 * - @a Problem: defines the problem to solve: it can be a steady problem (@a DarcySteady) or a time-dependent problem
 (@a DarcyPseudoSteady); it assembles the matrix and the right hand side;\n
 * - @a Exporter: exports as '.vtu' files the mesh, the properties, the solution and more.\n
 *
 * @section es Example of usage
 *
 * Here, we briefly describe how to use the code supposing that we want to solve a steady state problem with the hybrid MFD-FV method.\n
 * First of all, read the necessary parameters from the datafile:\n
 *
 * @code
 *
 * // we use the GetPot utility to access the datafile
 * GetPot command_line(argc,argv);
 * const std::string dataFileName = command_line.follow("data.txt", 2, "-f", "--file");
 * // Read Data from the datafile
 * DataPtr_Type dataPtr(new Data(dataFileName));
 *
 * @endcode
 *
 * Then we define the Mesh3D, the PropertiesMap so that we can import the mesh:
 *
 * @code
 *
 * //Define Mesh and Properties
 * Mesh3D mesh;
 * PropertiesMap propMap(dataPtr->getMobility(), dataPtr->getCompressibility());
 * //Create Importer
 * Importer * importer = 0;
 * importer = new ImporterForSolver(dataPtr->getMeshDir() + dataPtr->getMeshFile(), mesh, propMap);
 * //Import grid file
 * importer->import(dataPtr->fractureOn());
 *
 * @endcode
 *
 * After the reading of the mesh, it is necessary to perform some operations to process the mesh:
 *
 * @code
 *
 * //Compute the cells that separate each facet
 * mesh.updateFacetsWithCells();
 * //Compute the neighboring cells of each cell
 * mesh.updateCellsWithNeighbors();
 * //Set labels on boundary (necessary for BCs)
 * importer->extractBC(dataPtr->getTheta());
 * //Compute facet ids of the fractures (creates fracture networks)
 * mesh.updateFacetsWithFractures();
 *
 * @endcode
 *
 * We can the define the properties here, in the main program, if necessary
 * 
 * @code 
 *
 * // Define the permeability for bulk and fractures
 * std::shared_ptr<PermeabilityBase> matrixPerm( new PermeabilityDiagonal );
 * std::shared_ptr<PermeabilityBase> fracturesPerm( new PermeabilityScalar );
 * // Set the permability of bulk
 * matrixPerm->setPermeability( 1., 0 );
 * matrixPerm->setPermeability( 1., 4 );
 * matrixPerm->setPermeability( 1., 8 );
 * // Set the permeability of fractures
 * const Real kf = 1.e3; 
 * fracturesPerm->setPermeability( kf, 0 );
 * // Set the aperture (of fractures) and the porosity (of both bulk and fractures)
 * const Real aperture = 1.e-2;
 * const Real matrixPoro = 0.25;
 * const Real fracturesPoro = 1; 
 * // Set the properties
 * propMap.setPropertiesOnMatrix(mesh, matrixPoro, matrixPerm);
 * propMap.setPropertiesOnFractures(mesh, aperture, fracturesPoro, fracturesPerm);
 * 
 * @endcode
 *
 * We create the boundary conditions:
 *
 * @code
 *
 * //Assign to the border marked as 'Left' a Dirichlet condition equal to 1
 * BoundaryConditions::BorderBC leftBC (BorderLabel::Left, Dirichlet, fOne );
 * //And so on...
 * BoundaryConditions::BorderBC rightBC(BorderLabel::Right, Dirichlet, fZero );
 * ...
 *
 * //We create a vector that contains all the BorderBC...
 * std::vector<BoundaryConditions::BorderBC> borders;
 * //...and we insert into it the BCs previously created
 * borders.push_back( backBC );
 * borders.push_back( frontBC );
 * ...
 *
 * //Finally we create the BoundaryConditions
 * BoundaryConditions BC(borders);
 *
 * @endcode
 *
 * Then we create a Rigid_Mesh
 * @code
 *
 * //The Rigid_Mesh requires the Mesh3D and the PropertesMap
 * Rigid_Mesh myrmesh(mesh, propMap);
 *
 * @endcode
 *
 * We go ahead defining the problem:
 *
 * @code
 * 
 * // Define the problem
 * Pb * darcy(nullptr);
 * darcy = new DarcyPb(dataPtr->getSolverType(), myrmesh, BC, SS, dataPtr);
 * // Set the iterative parameters in the case of an iterative solver
 * if(dataPtr->getSolverPolicy() == Data::SolverPolicy::Iterative))
 * {
 *	dynamic_cast<IterativeSolver*>(darcy->getSolverPtr())->setMaxIter(
 *		dataPtr->getIterativeSolverMaxIter());
 *	dynamic_cast<IterativeSolver*>(darcy->getSolverPtr())->setTolerance(
 *		dataPtr->getIterativeSolverTolerance());
 * 	dynamic_cast<IterativeSolver*>(darcy->getSolverPtr())->set_precon(
 * 		dataPtr->getpreconType());
 * }
 * 
 * @endcode
 *
 * We assemble the problem and solve it.
 * 
 * @code
 * 
 * darcy->assemble();
 * darcy->solve();
 * 
 * @endcode
 * 
 * The solution can be exported:
 *
 * @code
 *
 * // Define the total number of facets and cells
 * UInt numFacetsTot   = myrmesh.Facets() + myrmesh.FrFacets.size();
 * UInt numCellsTot    = myrmesh.Cells() + myrmesh.FrFacets();
 * //Define the exporter
 * ExporterVTU exporter;
 * // Export the solution on bulk
 * exporter.exportSolution( myrmesh, dataPtr->getOutputDir() + dataPtr->
 *	getOutputFile() + "_solution.vtu", darcy->getSolver().getSolution()
 *	.tail(numCellsTot) );
 * // Export the solution of fractures
 * exporter.exportSolutionOnFractures(myrmesh, dataPtr->getOutputDir() + 
 *	dataPtr->getOutputFile() + "_solution_f.vtu", darcy->getSolver()
 *	.getSolution().tail(numCellsTot) );
 *
 * @endcode
 *
 * Remember to delete the Problem and the Importer instance:
 *
 * @code
 *
 * delete darcy;
 * delete importer;
 *
 * @endcode
 *
 */
