#------------------------------#
#    Data file for FVCode3D    #
#------------------------------#
functionLibrary=./libfun1.so   # library with the functions
[mesh]
mesh_dir    = ./data/                # mesh directory
mesh_file   = polyGrid3.fvg          # mesh filename
mesh_type   = .fvg                  # mesh format: .fvg, .grid, .mesh

[output]
output_dir  = ./results/             # output directory
output_file = sol                    # output prefix of the files

[numet]
method      = MFD                   # FV or MFD

[problem]
sourceFunction=SourceTerm            # function for source term (in th elibrary defined by functionLibrary)
type        = steady                 # steady or pseudoSteady
fracturesOn = 1                      # 1 enable fractures, 0 disable fractures
sourceOn    = none                   # where the source is applied: all, matrix, fractures, none
fracPressOn = 0                      # 1 set pressure inside fracture, 0 otherwise
fracPress   = 1.                     # if fracPressOn = 1, this set the value of the pressure
perm_size   = ScalarPermeability     # ScalarPermeability, DiagonalPermeability, SymTensorPermeability, FullTensorPermeability
initial_time    = 0.                 # if type = pseudosteady, this set the initial time
end_time    = 2.e6                   # if type = pseudosteady, this set the final time
time_step   = 1.e5                   # if type = pseudosteady, this set the time step
# permeabilities for matrix (bulk) and fractures
# in the form [type value(s)]
# type=0 scalar (1 value)
# type=1 diagonal (3 values)
# type=2 symmetric tensor (6 values by row, no repetitions)
[problem/bulk]
#default must be present
permeability='1 1. 1. 1.' #diagonal
porosity=0.25
#number of zones. 0 or missing means only default
numzones=0 # example for 2 zones
# the zone identifiers
zones='1 2'
[problem/bulk/zone/1]
permeability='2 1.e+20 1.e+20 2.e+20 4.e+20 7.e+20 9.e+20' #tensor
porosity=1.0
[problem/bulk/zone/2]
permeability='0 1.25' #scalar, value 1.25
porosity=1.0
[problem/fracture]
#default must be present
permeability='0 1.e-2'
porosity=1.0
aperture=1e-2
#number of zones. 0 means only default
numzones=0 #the example is fro 2 zones
zones='30 40'
[problem/fracture/zone/30]
permeability='1 1.e+20 1.e+20 2.e+20'
porosity=1.0
aperture=1e-3
[problem/fracture/zone/40]
permeability='0 1.25'
porosity=1.0
aperture=1e-3
[fluid]
mobility    = 1.                     # mobility of the fluid
compressibility = 1.                 # compressibility of the fluid

[bc]
theta       = 0.                     # rotation to apply to grid around the z
strategy    = 0                      # 0 strong  1 Nitsche penalization
nitscheParameter=100.                # used only if strategy=1  
[bc/Left]
type=0   # 0 Dirichlet 1 Neumann
f=fOne
[bc/Right]
type=0   # 0 Dirichlet 1 Neumann
f=fZero
[bc/Back]
type=1   # 0 Dirichlet 1 Neumann
f=fZero
[bc/Front]
type=1   # 0 Dirichlet 1 Neumann
f=fZero
[bc/Top]
type=1   # 0 Dirichlet 1 Neumann
f=fZero
[bc/Bottom]
type=1   # 0 Dirichlet 1 Neumann
f=fZero



[solver]
policy  = Iterative  	         # Iterative , Direct
type    = imlGMRES               # EigenCholesky , EigenLU , EigenUmfPack , imlCG , imlBiCGSTAB, imlGMRES, imlFGMRES, imlMINRES

    [./iterative]
    maxIt       = 20000              # maximum number of iterations of the iterative solver
    tolerance   = 1e-6               # tolerance of the iterative solver
	preconditioner = ILU           # Identity, Diagonal, BlockTriangular, ILU, HSS, BlockDiagonal
	                               #  Identity, Diagonal and BlockDiagonal are sdp, so can be used with MINRES solver
	lumped         = 0             # 1 perform lumping of mimetic inner product to construct approx shur
	                               # 0 use diagonal of mimetic inner product to construct approx shur
	restart        =100            # restart level for GMRES(m) and FGMRES(m)
# Solver used for the incomplete shur complement (Chowleski, Umfpack, CG) NOT YET IMPLEMENTED
# Chowleski (the default) in fact implements a sparse LDLT decomposition
    innerIteratorSolver = Chowleski 
# Tolerance used in the inner solver if innerIteratorSolver=CG  NOT YET IMPLEMENTE
    innerSolverTolerance = 1e-7     
[miscellaneous]
    verbose=0 # if =1 more verbose output
    dumpMatrices=0 # if =1 we dump matrices in matrix marked format (if iterative method is used)        
	

