#! /bin/bash

# include configuration file
source ../config

# abort if no package is specified
if [ $# -lt 1 ]; then
echo "usage: pkgbuild <package_list>"
    exit
fi

# define list of library packages
package_list=("$@")
package_number=$#

main() {

echo
echo "Installing packages in: $INSTALL_DIR"
echo


package_root=$PWD

# iterate on packages
for(( i=0; i < $package_number; i++ )); do

    package=${package_list[$i]}
    echo "====================================="
    echo " $i: installing $package package"
    echo "====================================="

    build_package $package || exit 1

done
}

build_package() {

    package=$1

    # load package specific functions
    echo_dbg "loading pkgbuild_$package script"
    source pkgbuild_$package || return 1

    # set directory
    mkdir -p $BUILD_DIR/scratch/$package
    pushd $BUILD_DIR/scratch/$package >/dev/null

        src_dir=$PWD/src
        build_dir=$PWD/build
        eval install_dir=\${${package}_install_dir}
        mkdir -p ${install_dir}

        # redirect stdout to log file if requested
        redirect_to_log=""
        if [ $LOG ]; then
            redirect_to_log=">> ${install_dir}/${package}.log 2>&1"
            # clear log file
            echo -n "" > ${install_dir}/${package}.log
        fi

        # download library sources
        mkdir -p $src_dir
        pushd src >/dev/null
        if [ $DOWNLOAD ]; then
            echo_dbg "downloading $package package"
            eval download_$package ${redirect_to_log} || return 1
        fi

        # unpack
        if [ $UNPACK ]; then
            echo_dbg "unpacking $package package"
            eval unpack_$package ${redirect_to_log} || return 1
        fi
        popd >/dev/null # $src_dir

        # build
        mkdir -p $build_dir
        pushd build >/dev/null
            echo_dbg "building $package package"
            eval build_$package ${redirect_to_log} || return 1

            # install
            echo_dbg "installing $package package to $install_dir"
            eval install_$package ${redirect_to_log} || return 1
        popd >/dev/null # $build_dir

    popd >/dev/null # $BUILD_DIR/scratch/$package

    # clean build directory if RM_DIR defined
    if [ $RM_TMP ]; then rm -rf $BUILD_DIR/scratch/$package; fi
}

echo_dbg() {
  if [ $DBG ]; then echo "DBG: " $* >&2; fi
}

# execute main function
main
