# - Config file for @PROJECT_NAME@
# It defines the following variables
#  @PROJECT_NAME@_INCLUDE_DIRS - include directories for @PROJECT_NAME@
#  @PROJECT_NAME@_LIBRARY_DIRS - library directories for @PROJECT_NAME@
#  @PROJECT_NAME@_LIBRARIES    - libraries to link against
#  @PROJECT_NAME@_TPL_INCLUDE_DIRS - Third party libraries include directories for @PROJECT_NAME@
#  @PROJECT_NAME@_TPL_LIBRARY_DIRS - Third party libraries library directories for @PROJECT_NAME@
#  @PROJECT_NAME@_TPL_PACKAGES_PROVIDING_USE_FILES - Names of third party libraries with a USE_FILE (which is automatically sourced by this script)
# Additionally, for each PACKAGE in @PROJECT_NAME@_TPL_PACKAGES_PROVIDING_USE_FILES a variable named TPL_${PACKAGE}_DIR is provided to find the package (often needed to be able to use the corresponding USE_FILE)

# Some packages don't use any variables but rather provide a USE_FILE that sets
# up CMake to link and include the proper files and directories. These packages
# need to pe found again, because their config file sets some variables used by
# their USE_FILE
get_filename_component(@PROJECT_NAME@_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include(${@PROJECT_NAME@_CMAKE_DIR}/FindThirdPartyLibrary.cmake)
@SET_TPL_DIRS_COMMANDS@
set(@PROJECT_NAME@_TPL_PACKAGES_PROVINDING_USE_FILES @PROJECT_TPL_PACKAGES_PROVIDING_USE_FILES@)
foreach(PACKAGE ${@PROJECT_NAME@_TPL_PACKAGES_PROVINDING_USE_FILES})
    find_third_party_library(${PACKAGE})
    include(${PACKAGE}_USE_FILE)
endforeach()

# Compute paths
set(@PROJECT_NAME@_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")
set(@PROJECT_NAME@_LIBRARY_DIRS "@CONF_LIBRARY_DIRS@")
set(@PROJECT_NAME@_LIBRARIES @LIBRARIES@ )

set(@PROJECT_NAME@_TPL_INCLUDE_DIRS "@PROJECT_TPL_INCLUDE_DIRS@")
set(@PROJECT_NAME@_TPL_LIBRARY_DIRS "@PROJECT_TPL_LIBRARY_DIRS@")

